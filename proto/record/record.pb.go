// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/token-srv/proto/record/record.proto

/*
Package record is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/token-srv/proto/record/record.proto

It has these top-level messages:
	Token
	CreateRequest
	CreateResponse
	DeleteRequest
	DeleteResponse
	ReadRequest
	ReadResponse
	UpdateRequest
	UpdateResponse
	SearchRequest
	SearchResponse
	GenerateRequest
	GenerateResponse
*/
package record

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Token struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Created   int64  `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Updated   int64  `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Token) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Token) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Token) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Token) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Token) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type CreateRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type CreateResponse struct {
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ReadRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReadRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadResponse struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReadResponse) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type UpdateRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type UpdateResponse struct {
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type SearchRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Limit     int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset    int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SearchRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SearchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type SearchResponse struct {
	Tokens []*Token `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SearchResponse) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type GenerateRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *GenerateRequest) Reset()                    { *m = GenerateRequest{} }
func (m *GenerateRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateRequest) ProtoMessage()               {}
func (*GenerateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GenerateRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type GenerateResponse struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GenerateResponse) Reset()                    { *m = GenerateResponse{} }
func (m *GenerateResponse) String() string            { return proto.CompactTextString(m) }
func (*GenerateResponse) ProtoMessage()               {}
func (*GenerateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GenerateResponse) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func init() {
	proto.RegisterType((*Token)(nil), "Token")
	proto.RegisterType((*CreateRequest)(nil), "CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "CreateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "DeleteResponse")
	proto.RegisterType((*ReadRequest)(nil), "ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "ReadResponse")
	proto.RegisterType((*UpdateRequest)(nil), "UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "UpdateResponse")
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "SearchResponse")
	proto.RegisterType((*GenerateRequest)(nil), "GenerateRequest")
	proto.RegisterType((*GenerateResponse)(nil), "GenerateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Record service

type RecordClient interface {
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type recordClient struct {
	cc *grpc.ClientConn
}

func NewRecordClient(cc *grpc.ClientConn) RecordClient {
	return &recordClient{cc}
}

func (c *recordClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	out := new(GenerateResponse)
	err := grpc.Invoke(ctx, "/Record/Generate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/Record/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := grpc.Invoke(ctx, "/Record/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/Record/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/Record/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/Record/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Record service

type RecordServer interface {
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
}

func RegisterRecordServer(s *grpc.Server, srv RecordServer) {
	s.RegisterService(&_Record_serviceDesc, srv)
}

func _Record_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Record/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Record/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Record/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Record/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Record/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Record/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Record_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Record",
	HandlerType: (*RecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _Record_Generate_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Record_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Record_Read_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Record_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Record_Update_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Record_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/micro/token-srv/proto/record/record.proto",
}

func init() {
	proto.RegisterFile("github.com/micro/token-srv/proto/record/record.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xed, 0x6e, 0x94, 0x50,
	0x10, 0x5d, 0xd8, 0x5d, 0xb4, 0xd3, 0x02, 0xeb, 0xc4, 0x18, 0x42, 0xaa, 0x6e, 0x6e, 0x62, 0xd2,
	0x44, 0xf7, 0x52, 0xab, 0x6f, 0xa0, 0x89, 0xff, 0x51, 0x1f, 0x80, 0xc2, 0xd4, 0x12, 0x0b, 0x17,
	0x2f, 0xac, 0xff, 0x7c, 0x0d, 0x9f, 0xd7, 0x30, 0xf7, 0x12, 0x3e, 0x92, 0xda, 0xfe, 0xda, 0x9d,
	0x99, 0x33, 0x73, 0xcf, 0xcc, 0x39, 0xc0, 0xc7, 0x1f, 0x65, 0x77, 0x7b, 0xbc, 0x96, 0xb9, 0xaa,
	0x92, 0xaa, 0xcc, 0xb5, 0x4a, 0x3a, 0xf5, 0x93, 0xea, 0x43, 0xab, 0x7f, 0x27, 0x8d, 0x56, 0x9d,
	0x4a, 0x34, 0xe5, 0x4a, 0x17, 0xf6, 0x47, 0x72, 0x4e, 0xfc, 0x81, 0xed, 0xb7, 0x1e, 0x86, 0x01,
	0xb8, 0x65, 0x11, 0x39, 0x7b, 0xe7, 0xe2, 0x24, 0x75, 0xcb, 0x02, 0xcf, 0xe1, 0xa4, 0xce, 0x2a,
	0x6a, 0x9b, 0x2c, 0xa7, 0xc8, 0xe5, 0xf4, 0x98, 0x40, 0x84, 0x4d, 0x1f, 0x44, 0x6b, 0x2e, 0xf0,
	0x7f, 0x8c, 0xe0, 0x49, 0xae, 0x29, 0xeb, 0xa8, 0x88, 0x36, 0x7b, 0xe7, 0x62, 0x9d, 0x0e, 0x61,
	0x5f, 0x39, 0x36, 0x05, 0x57, 0xb6, 0xa6, 0x62, 0x43, 0x71, 0x00, 0xff, 0x13, 0x83, 0x52, 0xfa,
	0x75, 0xa4, 0xb6, 0xc3, 0x73, 0xd8, 0x32, 0x6d, 0x66, 0x72, 0x7a, 0xe5, 0x49, 0x66, 0x97, 0x9a,
	0xa4, 0xd8, 0x41, 0x30, 0xc0, 0xdb, 0x46, 0xd5, 0x2d, 0x89, 0xd7, 0xe0, 0x7f, 0xa6, 0x3b, 0x1a,
	0x07, 0x2c, 0xf6, 0xe8, 0x5b, 0x06, 0x80, 0x6d, 0x79, 0x09, 0xa7, 0x29, 0x65, 0xc5, 0x7d, 0x0d,
	0xef, 0xe0, 0xcc, 0x94, 0x0d, 0xfc, 0x01, 0x46, 0x07, 0xf0, 0xbf, 0xf3, 0x2e, 0x8f, 0x5e, 0x60,
	0x80, 0x5b, 0x36, 0x0a, 0xfc, 0xaf, 0x94, 0xe9, 0xfc, 0x76, 0x1c, 0x30, 0x39, 0xbc, 0x73, 0xdf,
	0xe1, 0xdd, 0xc9, 0xe1, 0x9f, 0xc3, 0xf6, 0xae, 0xac, 0xca, 0x8e, 0xd5, 0x58, 0xa7, 0x26, 0xc0,
	0x17, 0xe0, 0xa9, 0x9b, 0x9b, 0x96, 0x3a, 0xab, 0x86, 0x8d, 0xc4, 0x25, 0x04, 0xc3, 0x83, 0x76,
	0xc3, 0x57, 0xe0, 0x31, 0xbb, 0x36, 0x72, 0xf6, 0xeb, 0x09, 0x67, 0x9b, 0x15, 0x09, 0x84, 0x5f,
	0xa8, 0x26, 0x3d, 0xdb, 0xf2, 0x3f, 0x24, 0xc5, 0x25, 0xec, 0xc6, 0x86, 0xc7, 0x9c, 0xf1, 0xea,
	0xaf, 0x0b, 0x5e, 0xca, 0xbe, 0xc4, 0xf7, 0xf0, 0x74, 0x68, 0xc6, 0x9d, 0x5c, 0x3c, 0x1c, 0x3f,
	0x93, 0xcb, 0xc9, 0x62, 0x85, 0x6f, 0xc1, 0x33, 0xb6, 0xc0, 0x40, 0xce, 0xec, 0x14, 0x87, 0x72,
	0xe1, 0x97, 0x15, 0xbe, 0x81, 0x4d, 0xaf, 0x2f, 0x9e, 0xc9, 0x89, 0x0b, 0x62, 0x5f, 0x4e, 0x45,
	0x37, 0x33, 0x8d, 0x6f, 0x30, 0x90, 0x33, 0x87, 0xc5, 0xa1, 0x5c, 0x18, 0x8a, 0xc1, 0x46, 0x56,
	0x0c, 0xe4, 0xcc, 0x0e, 0x71, 0x28, 0x17, 0x7a, 0x33, 0xd8, 0x08, 0x80, 0x81, 0x9c, 0x49, 0x1f,
	0x87, 0x72, 0xae, 0x8c, 0x58, 0x5d, 0x7b, 0xfc, 0x99, 0x7e, 0xf8, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x2d, 0x00, 0x8d, 0x97, 0xde, 0x03, 0x00, 0x00,
}
