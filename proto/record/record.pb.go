// Code generated by protoc-gen-go.
// source: github.com/micro/token-srv/proto/record/record.proto
// DO NOT EDIT!

/*
Package record is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/token-srv/proto/record/record.proto

It has these top-level messages:
	Token
	CreateRequest
	CreateResponse
	DeleteRequest
	DeleteResponse
	ReadRequest
	ReadResponse
	UpdateRequest
	UpdateResponse
	SearchRequest
	SearchResponse
	GenerateRequest
	GenerateResponse
*/
package record

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Token struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Created   int64  `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Updated   int64  `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type CreateResponse struct {
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ReadRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ReadResponse struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReadResponse) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type UpdateRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type UpdateResponse struct {
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type SearchRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Limit     int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset    int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type SearchResponse struct {
	Tokens []*Token `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SearchResponse) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type GenerateRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *GenerateRequest) Reset()                    { *m = GenerateRequest{} }
func (m *GenerateRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateRequest) ProtoMessage()               {}
func (*GenerateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type GenerateResponse struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GenerateResponse) Reset()                    { *m = GenerateResponse{} }
func (m *GenerateResponse) String() string            { return proto.CompactTextString(m) }
func (*GenerateResponse) ProtoMessage()               {}
func (*GenerateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GenerateResponse) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func init() {
	proto.RegisterType((*Token)(nil), "Token")
	proto.RegisterType((*CreateRequest)(nil), "CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "CreateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "DeleteResponse")
	proto.RegisterType((*ReadRequest)(nil), "ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "ReadResponse")
	proto.RegisterType((*UpdateRequest)(nil), "UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "UpdateResponse")
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "SearchResponse")
	proto.RegisterType((*GenerateRequest)(nil), "GenerateRequest")
	proto.RegisterType((*GenerateResponse)(nil), "GenerateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Record service

type RecordClient interface {
	Generate(ctx context.Context, in *GenerateRequest, opts ...client.CallOption) (*GenerateResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
}

type recordClient struct {
	c           client.Client
	serviceName string
}

func NewRecordClient(serviceName string, c client.Client) RecordClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "record"
	}
	return &recordClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *recordClient) Generate(ctx context.Context, in *GenerateRequest, opts ...client.CallOption) (*GenerateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Record.Generate", in)
	out := new(GenerateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Record.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Record.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Record.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Record.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Record.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Record service

type RecordHandler interface {
	Generate(context.Context, *GenerateRequest, *GenerateResponse) error
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
}

func RegisterRecordHandler(s server.Server, hdlr RecordHandler) {
	s.Handle(s.NewHandler(&Record{hdlr}))
}

type Record struct {
	RecordHandler
}

func (h *Record) Generate(ctx context.Context, in *GenerateRequest, out *GenerateResponse) error {
	return h.RecordHandler.Generate(ctx, in, out)
}

func (h *Record) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.RecordHandler.Create(ctx, in, out)
}

func (h *Record) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.RecordHandler.Read(ctx, in, out)
}

func (h *Record) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.RecordHandler.Delete(ctx, in, out)
}

func (h *Record) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.RecordHandler.Update(ctx, in, out)
}

func (h *Record) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.RecordHandler.Search(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x93, 0x5f, 0x6f, 0xa2, 0x40,
	0x14, 0xc5, 0x55, 0x84, 0x5d, 0xaf, 0x82, 0x3a, 0xc9, 0x6e, 0x58, 0xf7, 0x65, 0x33, 0x59, 0x1b,
	0x9b, 0xa6, 0x43, 0x6a, 0xfb, 0x0d, 0xda, 0xa4, 0x8f, 0x4d, 0xec, 0x9f, 0x77, 0x84, 0x6b, 0x25,
	0x15, 0x86, 0x0e, 0xd8, 0x8f, 0xd2, 0xcf, 0xdb, 0x61, 0x06, 0x22, 0xd0, 0x7f, 0x4f, 0xc6, 0x33,
	0xbf, 0xb9, 0xf7, 0xe4, 0x9c, 0x01, 0x2e, 0x1e, 0xa3, 0x7c, 0xbb, 0x5f, 0xb3, 0x80, 0xc7, 0x5e,
	0x1c, 0x05, 0x82, 0x7b, 0x39, 0x7f, 0xc2, 0xe4, 0x34, 0x13, 0x2f, 0x5e, 0x2a, 0x78, 0xce, 0x3d,
	0x81, 0x01, 0x17, 0x61, 0xf9, 0xc3, 0x94, 0x46, 0x1f, 0xc0, 0xbc, 0x2b, 0x30, 0x02, 0xd0, 0x8b,
	0x42, 0xb7, 0xfb, 0xaf, 0xbb, 0x18, 0x90, 0x29, 0x0c, 0x12, 0x3f, 0xc6, 0x2c, 0xf5, 0x03, 0x74,
	0x7b, 0x4a, 0x1a, 0x41, 0xbf, 0x90, 0x5c, 0x43, 0xfd, 0x1b, 0xc3, 0x8f, 0x40, 0xa0, 0x9f, 0x63,
	0xe8, 0xf6, 0xa5, 0x60, 0x14, 0xc2, 0x3e, 0x0d, 0x95, 0x60, 0x16, 0x02, 0x3d, 0x02, 0xfb, 0x52,
	0x11, 0x2b, 0x7c, 0xde, 0x63, 0x96, 0x93, 0x5f, 0x60, 0x2a, 0x3f, 0x6a, 0xc5, 0x70, 0x69, 0x31,
	0xb5, 0x96, 0x4e, 0xc0, 0xa9, 0xb8, 0x2c, 0xe5, 0x49, 0x86, 0xf4, 0x2f, 0xd8, 0x57, 0xb8, 0xc3,
	0xc3, 0xcd, 0x9a, 0xb3, 0x02, 0xaf, 0x0e, 0x4b, 0xfc, 0x0f, 0x0c, 0x57, 0xe8, 0x87, 0x1f, 0xc1,
	0x73, 0x18, 0xe9, 0x23, 0x8d, 0x7e, 0x66, 0x41, 0x5a, 0xbd, 0x57, 0xde, 0xbf, 0xb7, 0x5a, 0x71,
	0xe5, 0xee, 0x1b, 0xb0, 0x6f, 0xd1, 0x17, 0xc1, 0xb6, 0xba, 0xd9, 0x08, 0xae, 0xdb, 0x08, 0x4e,
	0xc7, 0x68, 0x83, 0xb9, 0x8b, 0xe2, 0x28, 0x57, 0x39, 0x1a, 0xc4, 0x01, 0x8b, 0x6f, 0x36, 0x19,
	0xe6, 0x3a, 0x46, 0xba, 0x00, 0xa7, 0x1a, 0x58, 0x7a, 0xfe, 0x0d, 0x96, 0xf2, 0x92, 0xc9, 0x71,
	0x46, 0xcd, 0xcc, 0x7f, 0x18, 0x5f, 0x63, 0x82, 0xa2, 0x66, 0xfb, 0xfd, 0x72, 0x7a, 0x0c, 0x93,
	0x03, 0xf5, 0x65, 0x0a, 0xcb, 0xd7, 0x1e, 0x58, 0x2b, 0xf5, 0x32, 0xc8, 0x19, 0xfc, 0xac, 0x6e,
	0x91, 0x09, 0x6b, 0xad, 0x99, 0x4d, 0x59, 0x7b, 0x24, 0xed, 0x90, 0x13, 0xb0, 0x74, 0x8d, 0xc4,
	0x61, 0x8d, 0xde, 0x67, 0x63, 0xd6, 0xea, 0xb7, 0x43, 0xe6, 0xd0, 0x2f, 0x7a, 0x21, 0x23, 0x56,
	0x6b, 0x6e, 0x66, 0xb3, 0x7a, 0x59, 0x7a, 0xa6, 0xee, 0x5a, 0xce, 0x6c, 0xbc, 0x08, 0x39, 0xb3,
	0xf5, 0x08, 0x14, 0xac, 0xcb, 0x91, 0x70, 0xa3, 0x4d, 0x09, 0xb7, 0x5a, 0x53, 0xb0, 0x8e, 0x59,
	0xc2, 0x8d, 0x02, 0x25, 0xdc, 0xcc, 0x9f, 0x76, 0xd6, 0x96, 0xfa, 0x50, 0xce, 0xdf, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x16, 0x9f, 0x70, 0x9f, 0x60, 0x03, 0x00, 0x00,
}
